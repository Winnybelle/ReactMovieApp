[{"C:\\Users\\WINNIFRED\\reactmovieapp\\ReactMovieApp\\src\\index.tsx":"1","C:\\Users\\WINNIFRED\\reactmovieapp\\ReactMovieApp\\src\\App.tsx":"2","C:\\Users\\WINNIFRED\\reactmovieapp\\ReactMovieApp\\src\\Components\\Movie.tsx":"3"},{"size":232,"mtime":1632016834683,"results":"4","hashOfConfig":"5"},{"size":2989,"mtime":1632039280879,"results":"6","hashOfConfig":"5"},{"size":747,"mtime":1632039263236,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"isteye",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\WINNIFRED\\reactmovieapp\\ReactMovieApp\\src\\index.tsx",[],["16","17"],"C:\\Users\\WINNIFRED\\reactmovieapp\\ReactMovieApp\\src\\App.tsx",["18"],"import * as React from \"react\"\r\nimport './index.css';\r\nimport Movie from './Components/Movie';\r\nimport {useState, useEffect} from 'react'\r\n// import { useMediaPredicate } from \"react-media-hook\";\r\n\r\n\r\n//TMDB API Data fetched with generated API Key. Note Comedy Genre = 35\r\nconst SEARCH_API = \"https://api.themoviedb.org/3/discover/movie?api_key=842d504b316030c6fe5b8b42793b3cf9&with_genres=35\";\r\n\r\n\r\nfunction App() {\r\n\r\n  //arrays and variables in hook format\r\n  const [movies, setMovies] = useState<any[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [dataSource, setDataSource] = useState<any[]>([]);\r\n  const [Rating, setRating] = useState('');\r\n\r\n  \r\n  //Get JSON data from API using API Key\r\n    useEffect(() => {\r\n      fetch(SEARCH_API).then(res => res.json())\r\n      .then(data =>{\r\n        console.log(data);\r\n        setMovies(data.results);\r\n        setDataSource(data.results);\r\n      })\r\n\r\n  }, [])\r\n\r\n//Movie search field filter submit event handler\r\nconst handleOnSubmit = (e: { preventDefault: () => void; }) => {\r\n  e.preventDefault();\r\n\r\n      let ndata  = dataSource.filter(data => data.title.toLowerCase() === searchTerm.toLowerCase())\r\n      console.log(ndata);\r\n      setMovies(ndata)\r\n};\r\n\r\n//Movie search field on change event handler\r\nconst handleOnChange = (e: { target: { value: React.SetStateAction<string>; }; }) => {\r\n  setSearchTerm(e.target.value);\r\n      let ndata = dataSource.filter(data => data.title.toLowerCase() === searchTerm.toLowerCase())\r\n      console.log(ndata);\r\n      setMovies(ndata);\r\n}\r\n\r\n// Sort by vote rating order\r\nconst handleRatingOnChange = (e: { target: { value: React.SetStateAction<string>; }; }) =>{\r\n  setRating(e.target.value);\r\n  if (e.target.value === 'Ascending'){\r\n      dataSource.sort(function (a, b) {return a.vote_average - b.vote_average})\r\n   } else if (e.target.value === 'Descending'){\r\n      dataSource.sort(function (a, b) {return b.vote_average - a.vote_average})\r\n   } else{\r\n\r\n   }\r\n}\r\n  \r\nreturn (\r\n   <>\r\n    <header>\r\n {/* Filter movie search field container */}\r\n      <form onSubmit={handleOnSubmit}>\r\n        <input \r\n          className=\"search\" \r\n          type=\"text\" \r\n          placeholder=\"Search...\"\r\n          value = {searchTerm}\r\n          onChange={handleOnChange}\r\n        />\r\n     \r\n      {/*  Rating Sort field container*/}\r\n      <div className = \"sorting\">\r\n      <label>Rating</label>\r\n       <select onChange={handleRatingOnChange}  style={{width:200, height:40, borderRadius:3}}>\r\n          <option value=\"\" disabled selected>sort by rating..</option>\r\n          <option>Ascending</option>\r\n          <option>Descending</option>\r\n          </select>\r\n     </div>\r\n      </form>\r\n     </header>\r\n\r\n{/* links to all container for parameters in the view */}\r\n    <div className=\"movie-container\">\r\n        {movies.length > 0 && \r\n        movies.map((movie) => <Movie key = \r\n        {movie.id} {...movie}/>)}\r\n    </div>\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\WINNIFRED\\reactmovieapp\\ReactMovieApp\\src\\Components\\Movie.tsx",[],{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":18,"column":10,"nodeType":"25","messageId":"26","endLine":18,"endColumn":16},"no-native-reassign",["27"],"no-negated-in-lhs",["28"],"@typescript-eslint/no-unused-vars","'Rating' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]